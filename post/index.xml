<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on CoderDu </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https:://fenolona.github.io/post/</link>
    <language>en-us</language>
    <author>Johnsondu</author>
    
    <updated>Thu, 27 Apr 2017 09:00:28 CST</updated>
    
    <item>
      <title>C&#43;&#43;中的Sequence Point，构造函数等问题</title>
      <link>https:://fenolona.github.io/post/sequencepoint/</link>
      <pubDate>Thu, 27 Apr 2017 09:00:28 CST</pubDate>
      <author>Johnsondu</author>
      <guid>https:://fenolona.github.io/post/sequencepoint/</guid>
      <description>

&lt;p&gt;本文将简要的讨论以下几个问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;什么是*Sequence Point&lt;/strong&gt;*&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C++的构造函数为什么没有返回值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何显示调用构造函数和析构函数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拷贝构造函数为什么必须是引用传递&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类成员函数中static和const 不能连用的原因&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-什么是-sequence-point&#34;&gt;1. 什么是&lt;em&gt;Sequence Point&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;在现今的笔试中 ，我们经常会遇到如下的问题，当下列语句执行完后，a的值是多少?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int a = 1; // no side effect
a = a ++;  // side effect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;答案无非是提供了，1， 2， undefined&amp;hellip;
其实上述例子，在C++中已经有相应的名词*Sequence Point*。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; A sequence point is a point in the program&#39;s exexution sequence where all previous side-effects shall have take place and where all subsequent side-effects shall not have take place.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在C++中，表达式计算存在两种类型，一是无副作用的，而是有副作用(&lt;em&gt;side effect&lt;/em&gt;)的。 如上述代码所示。
而一个 &lt;em&gt;sequence point&lt;/em&gt; 按照上述定义为，该点前的表达式的所有副作用，在程序执行到达改点之前发生完毕；该点后的表达式的所有副作用，在程序执行到达该点时尚未发生。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;法则1 在表达式求值时，在前一个和下一个顺序点之中，一个对象所存储的值至多只能被修改一次。如下图的结果是&lt;em&gt;undefined&lt;/em&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20160414204125886&#34; alt=&#34;rule 1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;法则2 在表达式求值的过程中会更改某个对象的值，要求更改前的值被读取的唯一目的是用来确定存入新值。
&lt;img src=&#34;http://img.blog.csdn.net/20160414204400226&#34; alt=&#34;rule 2&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在C中，规定的*Sequence Point*很少，因为这有益于编译器的优化最大化。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-c-的构造函数为什么没有返回值&#34;&gt;2. C++的构造函数为什么没有返回值&lt;/h2&gt;

&lt;p&gt;上一个简单的例子，帮助理解与记忆。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Base {
// ...
};

void foo(int a) {
	// do something... 
}

void foo(const Base&amp;amp; base) {
	// do something...
}

int main()
{
	// 如果构造函数返回值，下面的结果将调用哪个函数？
	foo(Base()); 
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很显然，构造函数不设定返回值，是因为构造函数的特殊性质决定的。如果有返回值，那么将会存在很多问题。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-如何显示调用构造函数和析构函数&#34;&gt;3. 如何显示调用构造函数和析构函数&lt;/h2&gt;

&lt;p&gt;事实上，我们采用*new*操作符时，一般会发生以下三件事情：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;调用::operator new 分配所需内存&lt;/li&gt;
&lt;li&gt;调用对象的构造函数&lt;/li&gt;
&lt;li&gt;返回新分配的并构造的对象的指针&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们用以下代码来模拟这个过程。结果说明，我们总是可是显示的调用构造函数和析构函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Base
{
public:
    Base() { cout &amp;lt;&amp;lt; &amp;quot;constructors&amp;quot; &amp;lt;&amp;lt; endl; }
    ~Base() { cout &amp;lt;&amp;lt; &amp;quot;Destructors&amp;quot; &amp;lt;&amp;lt; endl; }
};

int main()
{
    Base *pb = (Base *)malloc(sizeof(Base));
    new(pb) Base();
    pb-&amp;gt;~Base();
    delete pb;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-拷贝构造函数为什么必须是引用传递&#34;&gt;4. 拷贝构造函数为什么必须是引用传递&lt;/h2&gt;

&lt;p&gt;在深入探讨之前，首先列出拷贝初始化的几种情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在使用=定义变量时， 如 &lt;strong&gt;Foo newObj = oldObj&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;将 一个对象作为实参传递给一个非引用类型的实参；&lt;/li&gt;
&lt;li&gt;从一个返回类型为非引用类型的函数返回一个对象；&lt;/li&gt;
&lt;li&gt;用花括号初始化一个数组中的元素或一个聚合类中的成员；&lt;/li&gt;
&lt;li&gt;某些类类型会对他们所分配的对象使用拷贝初始化。例如，当我们初始化标准库容器或者调用insert或push成员，容器会对其进行拷贝初始化。而用emplace成员创建的元素则都进行直接初始化。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Base
{
public:
    Base() { cout &amp;lt;&amp;lt; &amp;quot;constructors&amp;quot; &amp;lt;&amp;lt; endl; }
    Base(const Base bs) {
        a = bs.num;
    }
    ~Base() { cout &amp;lt;&amp;lt; &amp;quot;Destructors&amp;quot; &amp;lt;&amp;lt; endl; }

private:
    int num;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正如上述所说的，在函数调用过程中，具有非引用类型的参数进行拷贝初始化。类似的，当一个具有非引用类型的返回类型时，返回值会被用来初始化调用方的结果。
&lt;strong&gt;拷贝构造函数被用来初始化非引用类类型参数，如果参数不是引用类型，则将进入死循环&amp;ndash;&amp;gt;因为为了调用拷贝构造函数，必须拷贝它的实参，但为了拷贝实参，我们又需要调用拷贝构造函数，如此无限循环&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;5-类成员函数中static和const-不能连用的原因&#34;&gt;5. 类成员函数中static和const 不能连用的原因&lt;/h2&gt;

&lt;p&gt;C++的设计准则之一：nonstatic member function必须至少和nonmember function有相同的效率。
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;float magnitude3d(const Point3d *_this) { //... }
float Point3d::magnitude3d() const { //... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于后者的nonstatic member function而言，其最终会扩展为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;Point3d Point3d::magnitude(const Point3d *const this) {
	//...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由上可见，&lt;strong&gt;const&lt;/strong&gt;修饰的是指针this，而this属于object的范畴。而对于&lt;strong&gt;static&lt;/strong&gt;而言，类中的static成员函数或成员变量，不隶属于某个具体的object，其范畴是整个class。因此，修饰的范畴不同，故&lt;strong&gt;static和const在类中对同一个成员函数或者成员变量不能一起使用&lt;/strong&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
